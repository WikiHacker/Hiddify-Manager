frontend in-tcpmode
    {% for port in (["80"] + hconfigs['http_ports'].split(',')) | unique%}
    bind :{{port}},:::{{port}} v4v6 tfo
    {%endfor%}
    bind abns@https_in_ssl tfo accept-proxy ssl crt /opt/hiddify-manager/ssl/ alpn h2,http/1.1,h3 allow-0rtt
    acl h2 ssl_fc_alpn -i h2
    acl h3 ssl_fc_alpn -i h3

    http-response set-header alt-svc "h3=\":443\";ma=900;"
    
    tcp-request inspect-delay 5s
    tcp-request content accept if HTTP h2

    use_backend to_httpmode if h2
    use_backend to_httpmode if h3
    
    #map is not working in tcp mode




    use_backend generate_204 if { path -i /{{hconfigs['proxy_path_client']}}/generate_204 }
    use_backend generate_204 if { path -i /{{hconfigs['proxy_path']}}/generate_204 }
    use_backend hiddifypanel if { path_beg /{{hconfigs['proxy_path_client']}}/  }
    use_backend hiddifypanel if { path_beg /{{hconfigs['proxy_path_admin']}}/ hiddifypanel }
    use_backend hiddifypanel if { path_beg /{{hconfigs['proxy_path']}}/ hiddifypanel }

    {%for d in domain if d['mode']=='sub_link_only'%} 
        use_backend to_panel_only if { hdr(host) -i d['domain'] }
    {%endfor%}

    {% for d in domains if d['internal_port_special'] %}
    {# if happen, it means active probing... sending to decoy#}
        {%set domain=d['domain']%}
        {%set port=d['internal_port_special']%}
        use_backend sp_{{d['mode']}}_http_{{port}} if { hdr(host) -i {{domain}} }
    {%endfor%}


    {%if hconfigs['ssfaketls_enable'] and hconfigs['ssfaketls_fakedomain'] %}
    {# if happen, it means active probing... sending to decoy#}
    use_backend ssdecoy_http if { hdr(host) -i {{hconfigs['ssfaketls_fakedomain']}} }
    {%endif%}

    {%if hconfigs['telegram_enable'] and hconfigs['telegram_fakedomain'] %}
    {# if happen, it means active probing... sending to decoy#}
    use_backend tgdecoy_http if { hdr(host) -i {{hconfigs['telegram_fakedomain']}} }
    {%endif%}

    {%if hconfigs['shadowtls_enable'] and hconfigs['shadowtls_fakedomain']%}
    {# if happen, it means active probing... sending to decoy#}
    use_backend shadowtls_decoy_http if { hdr(host) -i {{hconfigs['shadowtls_fakedomain'] }} }
    {%endif%}



    {%if hconfigs['tcp_enable']%}
    use_backend vmesst if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_tcp'] }} }
    use_backend vlesst if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_tcp'] }} }
    #use_backend  v2rayt if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_tcp'] }} }
    use_backend trojant if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_tcp'] }} }
    {%endif%}


    {%if hconfigs['ws_enable']%}
    use_backend vmessw if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_ws'] }} }
    use_backend vlessw if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_ws'] }} }
    #use_backend v2rayw if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_ws'] }} }
    use_backend trojanw if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_ws'] }} }
    {%endif%}

    {%if hconfigs['httpupgrade_enable']%}
    use_backend vmesshu if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_httpupgrade'] }} }
    use_backend vlesshu if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_httpupgrade'] }} }
    # use_backend v2rayhu if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_httpupgrade'] }} }
    use_backend trojanhu if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_httpupgrade'] }} }
    {%endif%}

    {%if hconfigs['xhttp_enable']%}
    use_backend vmesshs if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_xhttp'] }} }
    use_backend vlesshs if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_xhttp'] }} }
    #use_backend v2rayhs if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_xhttp'] }} }
    use_backend trojanhs if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_xhttp'] }} }
    {%endif%}



    

    

    
    default_backend to_httpmode

